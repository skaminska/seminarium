require(dplyr)
install.packages("dlm")
library(dlm)

#wczytaj aktualny csv
coronavirus <- read.csv("https://raw.githubusercontent.com/RamiKrispin/coronavirus/master/csv/coronavirus.csv", header = T)

df <- coronavirus %>%
    dplyr::filter(country == "Poland") %>%
  dplyr::group_by(date, type) %>%
  dplyr::summarise(total = sum(cases, na.rm = TRUE)) %>%
  tidyr::pivot_wider(
    names_from = type,
    values_from = total
  ) %>%
  dplyr::arrange(date) %>%
  dplyr::ungroup() %>%
  dplyr::mutate(active = confirmed - death - recovered) %>%
  dplyr::mutate(
    confirmed_cum = cumsum(confirmed),
    death_cum = cumsum(death),
    recovered_cum = cumsum(recovered),
    active_cum = cumsum(active)
  )


setwd("E:/studia")
saveRDS(df, file = "df.tab")

#drugi etap
#tworzenie funkcji SIR
setwd("E:/studia")
df<-as.data.frame(readRDS("df.tab"))

SIR <- function(time, state, parameters) {
  par <- as.list(c(state, parameters))
  with(par, {
    dS <- -beta * I * S / N
    dI <- beta * I * S / N - gamma * I
    dR <- gamma * I
    list(c(dS, dI, dR))
  })
}

RSS <- function(parameters) {
  names(parameters) <- c("beta", "gamma")
  out <- ode(y = init, times = xrang, func = SIR, parms = parameters)
  fit <- out[, 3]
  sum((Infected - fit)^2)
}

#przygotowanie danych do analizy
N <- 37846605
xrang <- 43:nrow(df)
Infected <- df$active_cum[xrang]
Recover <- df$recovered_cum[xrang]+df$death_cum[xrang]
Suspect <- N -Infected - Recover
init<-c(S = N-max(Infected[1], 1), I = max(Infected[1], 1), R = 0)

library(deSolve)
Opt <- optim(c(0.5, 0.5),
             RSS,
             method = "L-BFGS-B",
             lower = c(0, 0),
             upper = c(1, 1)
)

# check for convergence
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
beta <- Opt$par[[1]]
gamma <- Opt$par[[2]]

install.packages("dlm")
library(dlm)

nt <- nrow(df)

grI <- df$confirmed_cum[44:nt]/df$confirmed_cum[43:(nt-1)]-1
#grI(t) = gamma * (R(t)-1)+V(t)* e(t)
#R(t) = R(t-1)+H(t)*d(t)
#R0(t) * Suspect(t-1) / N = R(t)

#theta(t) = GG(t)* theta(t-1) + w(t)*e(t)
#Y(t) = FF(t) * theta(t) + v(t)*dt

model <- dlm(FF = gamma, V=1, GG=1, W=1,m0 = 4, C0=1e2)
wyn <- dlmSmooth(grI, model)

wyn1<- (wyn$s+1)*N/Suspect[43:nt]
library(ggplot2)
betadf<- data.frame(t = df$date[43:nt], x=wyn1, typ = c("beta"))
ggplot(betadf, aes(x = as.Date(t), y = x, color = typ)) + geom_line()
plot(wyn1, type = "l")



makePlot<-function(dataToProcess){
  N <- 37846605
  xrang <- 43:nrow(dataToProcess)
  Infected <- dataToProcess$active_cum[xrang]
  Recover <- dataToProcess$recovered_cum[xrang]+dataToProcess$death_cum[xrang]
  Suspect <- N -Infected - Recover
  init<-c(S = N-max(Infected[1], 1), I = max(Infected[1], 1), R = 0)
  
  library(deSolve)
  Opt <- optim(c(0.5, 0.5),
               RSS,
               method = "L-BFGS-B",
               lower = c(0, 0),
               upper = c(1, 1)
  )
  # check for convergence
  Opt$message
  Opt_par <- setNames(Opt$par, c("beta", "gamma"))
  Opt_par
  beta <- Opt$par[[1]]
  gamma <- Opt$par[[2]]
  
  nt <- nrow(dataToProcess)
  
  grI <- dataToProcess$confirmed_cum[44:nt]/dataToProcess$confirmed_cum[43:(nt-1)]-1
  model <- dlm(FF = gamma, V=1, GG=1, W=1,m0 = 4, C0=1e2)
  wyn <- dlmSmooth(grI, model)
  
  wyn1<- (wyn$s+1)*N/Suspect[43:nt]
  library(ggplot2)
  betadf<- data.frame(t = df$date[43:nt], x=wyn1, typ = c("beta"))
  ggplot(betadf, aes(x = as.Date(t), y = x, color = typ)) + geom_line()
  plot(wyn1, type = "l")
}

makePlot(df)
####################################################

#wykres dla Polski
d<- data.frame(df$confirmed, df$death, df$recovered)
matplot(d, type="l")

d<-data.frame(df$confirmed_cum,df$active_cum, df$recovered_cum)
matplot(d, type = "l")

library(lubridate)

sir_start_date <- "2020-03-04"
sir_end_date <- max(df$date)
Infected <- subset(df, date >= ymd(sir_start_date) & date <= ymd(sir_end_date))$active_cum

Day<-1: length(Infected)

N <-37846605
init<-c(
  S=N-Infected[1],
  I=Infected[1],
  R=0
  )

library(deSolve)
Opt <- optim(c(0.5, 0.5),
             RSS,
             method = "L-BFGS-B",
             lower = c(0, 0),
             upper = c(1, 1)
)

# check for convergence
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par

t <- 1:as.integer(ymd(sir_end_date) + 1 - ymd(sir_start_date))

# get the fitted values from our SIR model
fitted_cumulative_incidence <- data.frame(ode(
  y = init, times = t,
  func = SIR, parms = Opt_par
))

# add a Date column and the observed incidence data
library(dplyr)
fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
  mutate(
    Date = ymd(sir_start_date) + days(t - 1),
    Country = "Poland",
    cumulative_incident_cases = Infected
  )

# plot the data
library(ggplot2)
fitted_cumulative_incidence %>%
  ggplot(aes(x = Date)) +
  geom_line(aes(y = I), colour = "red") +
  geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
  labs(
    y = "Wszystkie przypadki",
    title = "COVID-19 przewidywane vs zaobserwowane, Poland",
    subtitle = "(Red = przewidywania SIR, blue = zaobserwowane)"
  ) +
  theme_minimal()

fitted_cumulative_incidence %>%
  ggplot(aes(x = Date)) +
  geom_line(aes(y = I), colour = "red") +
  geom_point(aes(y = cumulative_incident_cases), colour = "blue") +
  labs(
    y = "Wszystkie przypadki",
    title = "COVID-19 przewidywane vs zaobserwowane, Poland",
    subtitle = "(Red = przewidywane SIR, blue = zaobserwowane)"
  ) +
  theme_minimal() +
  scale_y_log10(labels = scales::comma)


Opt_par
R0<-as.numeric(Opt_par[1]/Opt_par[2])
R0

t <- 1:(nrow(df)+10)

# get the fitted values from our SIR model
fitted_cumulative_incidence <- data.frame(ode(
  y = init, times = t,
  func = SIR, parms = Opt_par
))

# add a Date column and join the observed incidence data
fitted_cumulative_incidence <- fitted_cumulative_incidence %>%
  mutate(
    Date = ymd(sir_start_date) + days(t - 1),
    Country = "Poland",
    cumulative_incident_cases = c(Infected, rep(NA, length(t) - length(Infected)))
  )

# plot the data
fitted_cumulative_incidence %>%
  ggplot(aes(x = Date)) +
  geom_line(aes(y = I), colour = "red") +
  geom_line(aes(y = S), colour = "black") +
  geom_line(aes(y = R), colour = "green") +
  geom_point(aes(y = cumulative_incident_cases),
             colour = "blue"
  ) +
  scale_y_continuous(labels = scales::comma) +
  labs(y = "Persons", title = "COVID-19 przewidywane vs zaobserwowane, Poland") +
  scale_colour_manual(name = "", values = c(
    red = "red", black = "black",
    green = "green", blue = "blue"
  ), labels = c(
    "Susceptible",
    "Recovered", "Observed", "Infectious"
  )) +
  theme_minimal()

df<-df[apply(df[,-1], 1, function(x) !all(x==0)),]

# R0monthly = data.frame()
# 
# for(i in seq(1, nrow(df), by=30)){
#   if(!(i+30 > nrow(df)))
#   {
#     sir_start_date <-as.Date(df$date[i])
#     sir_end_date <-as.Date(df$date[i+30])
#   }
#   else
#   {
#       sir_start_date <-as.Date(df$date[i])
#       sir_end_date <-as.Date(max(df$date))
#   }
# 
#   Infected <- subset(df, date >= ymd(sir_start_date) & date <= ymd(sir_end_date))$active_cum
#       
#       Day<-1: length(Infected)
#       
#       Opt <- optim(c(0.45, 0.5),
#                    RSS,
#                    method = "L-BFGS-B",
#                    lower = c(0, 0),
#                    upper = c(1, 1)
#       )
#       Opt_par <- setNames(Opt$par, c("beta", "gamma"))
#       R0monthly <- data.frame(R0monthly)
#       R0monthly <- rbind(R0monthly, (Opt_par[1]/Opt_par[2]))
# }
# 
# matplot(R0monthly, type = "l")

R02 = data.frame()

######################
#w momencie gdy beta wynosi 1.0 R0 na wykresie tworzy ta dolna linie
#przy innej wartosci beta mamy gorna linie
######################
for(i in seq(1, nrow(df), by=1)){
  if(!(i+20 > nrow(df)))
  {
    sir_start_date <-as.Date(df$date[i])
    sir_end_date <-as.Date(df$date[i+20])
    
    print(i)
  }
  else
    break
  
  Infected <- subset(df, date >= ymd(sir_start_date) & date <= ymd(sir_end_date))$active_cum
  
  Day<-1: length(Infected)
  
  Opt <- optim(c(0.5, 0.5),
               RSS,
               method = "L-BFGS-B",
               lower = c(0, 0),
               upper = c(1, 1)
  )
  Opt_par <- setNames(Opt$par, c("beta", "gamma"))
  R02 <- data.frame(R02)
  R02 <- rbind(R02, (Opt_par[1]/Opt_par[2]))
}

matplot(R02, type ="l")

dn <- dnorm(R0, 2.5, 0.5)

