init<-c(S = N-max(Infected[1], 1), I = max(Infected[1], 1), R = 0)
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
beta <- Opt$par[[1]]
gamma <- Opt$par[[2]]
RS1 <- function(v,w,gamma, grJ) {
m1<-dlm(FF=gamma, V=v, GG=1, W=w, m0=0, C0=1)
wyn<-dlmFilter(grJ,m1)
sd(wyn$f-grJ)
}
grI1<-grI[epidemia]
zakres1<-c(min(epidemia)-1,epidemia)
Susp <- N-I-R-df$death_cum
Susp<-Susp[zakres1]
dat1<-df$dat[zakres1]
dan<-c(v=0,w=0,fw=Inf)
for (v in df$seq1) for (w in df$seq2) {
w1<-RS1(v,w,gamma,grI1)
if (w1<dan['fw'])
dan<-c(V=v,W=w,fw=w1)
}
model <- dlm(FF = gamma, V=v0, GG=1, W=w0, m0 = 4, C0=1e2) #petla dla roznych wartosci
wyn <- dlmSmooth(grI, model)
mse.list=dlmSvd2var(wyn$U.S, wyn$D.S)
se = 1.96*t(sapply(mse.list, FUN = function(x) sqrt(diag(x)))*sqrt(N/S))
wyn01 = data.frame(t=df$date[zakres1], R0=(wyn$s+1)*N/S, R0_UCL=(wyn$s+1)*N/S+se[1,],
R0_LCL = (wyn$s+1)*N/S-se[1,], grI=(c(0, grI)+1)*N/S)
list(beta=Opt$par[[1]], gamma=Opt$par[[2]], conv=Opt$convergence,
betadf=beta.df,  v=dan['V'],  w=dan['W'],   Err=dan['fw'])
}
ww<-SIRfunction(N, Infected, Recover, Suspect, df$death_cum, Opt_par[[1]], Opt_par[[2]])
SIRfunction <- function(N, I, R, S,D, Opt1, Opt2){
nt <- length(I)
grI <- I[2:nt]/I[1:nt-1]-1
epidemia <-which(!is.na(grI) && grI != Inf)
if(min(epidemia==1)){
epidemia <- setdiff(epidemia, Opt1)
}
I <- I[epidemia]
R <- R[epidemia]+D[epidemia]
S <- N - I - R
init<-c(S = N-max(Infected[1], 1), I = max(Infected[1], 1), R = 0)
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
beta <- Opt$par[[1]]
gamma <- Opt$par[[2]]
RS1 <- function(v,w,gamma, grJ) {
m1<-dlm(FF=gamma, V=v, GG=1, W=w, m0=0, C0=1)
wyn<-dlmFilter(grJ,m1)
sd(wyn$f-grJ)
}
grI1<-grI[epidemia]
zakres1<-c(min(epidemia)-1,epidemia)
Susp <- N-I-R-df$death_cum
Susp<-Susp[zakres1]
dat1<-df$dat[zakres1]
dan<-c(v=0,w=0,fw=Inf)
for (v in df$seq1) for (w in df$seq2) {
w1<-RS1(v,w,gamma,grI1)
if (w1<dan['fw'])
dan<-c(V=v,W=w,fw=w1)
}
model <- dlm(FF = gamma, V=v0, GG=1, W=w0, m0 = 4, C0=1e2) #petla dla roznych wartosci
wyn <- dlmSmooth(grI, model)
mse.list=dlmSvd2var(wyn$U.S, wyn$D.S)
se = 1.96*t(sapply(mse.list, FUN = function(x) sqrt(diag(x)))*sqrt(N/S))
wyn01 = data.frame(t=df$date[zakres1], R0=(wyn$s+1)*N/S, R0_UCL=(wyn$s+1)*N/S+se[1,],
R0_LCL = (wyn$s+1)*N/S-se[1,], grI=(c(0, grI)+1)*N/S)
}
SIRfunction <- function(N, I, R, S,D, Opt1, Opt2){
nt <- length(I)
grI <- I[2:nt]/I[1:nt-1]-1
epidemia <-which(!is.na(grI) && grI != Inf)
if(min(epidemia==1)){
epidemia <- setdiff(epidemia, Opt1)
}
I <- I[epidemia]
R <- R[epidemia]+D[epidemia]
S <- N - I - R
init<-c(S = N-max(Infected[1], 1), I = max(Infected[1], 1), R = 0)
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
beta <- Opt$par[[1]]
gamma <- Opt$par[[2]]
RS1 <- function(v,w,gamma, grJ) {
m1<-dlm(FF=gamma, V=v, GG=1, W=w, m0=0, C0=1)
wyn<-dlmFilter(grJ,m1)
sd(wyn$f-grJ)
}
grI1<-grI[epidemia]
zakres1<-c(min(epidemia)-1,epidemia)
Susp <- N-I-R-df$death_cum
Susp<-Susp[zakres1]
dat1<-df$dat[zakres1]
dan<-c(v=0,w=0,fw=Inf)
for (v in df$seq1) for (w in df$seq2) {
w1<-RS1(v,w,gamma,grI1)
if (w1<dan['fw'])
dan<-c(V=v,W=w,fw=w1)
}
model <- dlm(FF = gamma, V=v0, GG=1, W=w0, m0 = 4, C0=1e2) #petla dla roznych wartosci
wyn <- dlmSmooth(grI, model)
mse.list=dlmSvd2var(wyn$U.S, wyn$D.S)
se = 1.96*t(sapply(mse.list, FUN = function(x) sqrt(diag(x)))*sqrt(N/S))
wyn01 = data.frame(t=df$date[zakres1], R0=(wyn$s+1)*N/S, R0_UCL=(wyn$s+1)*N/S+se[1,],
R0_LCL = (wyn$s+1)*N/S-se[1,], grI=(c(0, grI)+1)*N/S)
}
ww<-SIRfunction(N, Infected, Recover, Suspect, df$death_cum, Opt_par[[1]], Opt_par[[2]])
matplot(x=as.Date(ww$betadf$t), y=ww$betadf[,c(2,5)], type="l",xlab = "Daty", ylab = "Wsp. R0", main="Porownanie R0 wygladzonego i obliczonego bezposrednio")
SIRfunction <- function(N, I, R, S,D, Opt1, Opt2){
nt <- length(I)
grI <- I[2:nt]/I[1:nt-1]-1
epidemia <-which(!is.na(grI) && grI != Inf)
if(min(epidemia==1)){
epidemia <- setdiff(epidemia, Opt1)
}
I <- I[epidemia]
R <- R[epidemia]+D[epidemia]
S <- N - I - R
init<-c(S = N-max(Infected[1], 1), I = max(Infected[1], 1), R = 0)
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
beta <- Opt$par[[1]]
gamma <- Opt$par[[2]]
RS1 <- function(v,w,gamma, grJ) {
m1<-dlm(FF=gamma, V=v, GG=1, W=w, m0=0, C0=1)
wyn<-dlmFilter(grJ,m1)
sd(wyn$f-grJ)
}
grI1<-grI[epidemia]
zakres1<-c(min(epidemia)-1,epidemia)
Susp <- N-I-R-df$death_cum
Susp<-Susp[zakres1]
dat1<-df$dat[zakres1]
dan<-c(v=0,w=0,fw=Inf)
for (v in df$seq1) for (w in df$seq2) {
w1<-RS1(v,w,gamma,grI1)
if (w1<dan['fw'])
dan<-c(V=v,W=w,fw=w1)
}
model <- dlm(FF = gamma, V=v0, GG=1, W=w0, m0 = 4, C0=1e2) #petla dla roznych wartosci
wyn <- dlmSmooth(grI, model)
mse.list=dlmSvd2var(wyn$U.S, wyn$D.S)
se = 1.96*t(sapply(mse.list, FUN = function(x) sqrt(diag(x)))*sqrt(N/S))
wyn01 = data.frame(t=df$date[zakres1], R0=(wyn$s+1)*N/S, R0_UCL=(wyn$s+1)*N/S+se[1,],
R0_LCL = (wyn$s+1)*N/S-se[1,], grI=(c(0, grI)+1)*N/S)
}
ww<-SIRfunction(N, Infected, Recover, Suspect, df$death_cum, Opt_par[[1]], Opt_par[[2]])
ggplot(ww)
str(ww)
ww<-SIRfunction(N, Infected, Recover, Suspect, df$death_cum, Opt_par[[1]], Opt_par[[2]])
ww$t = as.numeric(1:nrow(ww))
melted<- melt(ww, id.vars="t")
library(reshape2)
melted<- melt(ww, id.vars="t")
str(melted)
ggplot(melted, aes(x=t, y=value, color = variable)) + theme_bw() + geom_line()
melted<- melt(ww[,c(1,2,4)], id.vars="t")
ggplot(melted, aes(x=t, y=value, color = variable)) + theme_bw() + geom_line()
melted<- melt(ww[,c(1,2,5)], id.vars="t")
ggplot(melted, aes(x=t, y=value, color = variable)) + theme_bw() + geom_line()
require(dplyr)
install.packages("dlm")
install.packages("R0")
install.packages("EpiEstim")
library(dlm)
coronavirus <- read.csv("https://raw.githubusercontent.com/RamiKrispin/coronavirus/master/csv/coronavirus.csv", header = T)
vaccination <- read.csv("https://github.com/owid/covid-19-data/blob/master/public/data/vaccinations/vaccinations.csv", header = T)
View(vaccination)
View(vaccination)
View(vaccination)
library(jsonlite)
install.packages("tictoc")
tic()
vaccination <- stream_in(file(here("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.json")))
library(tictoc)
tic()
vaccination <- stream_in(file(here("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.json")))
library(jsonlite)
library(tictoc)
library(dlm)
tic()
vaccination <- stream_in(file(here("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.json")))
library(here)
install.packages("here")
library(here)
tic()
vaccination <- stream_in(file(here("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.json")))
vaccination <- fromJSON()
install.packages("covid19.analitics")
install.packages("covid19")
library(covid19.analytics)
vaccination <- covid19.data(case = "aggregated",
local.data = FALSE,
debrief = FALSE,
acknowledge = FALSE)
View(vaccination)
vaccination <- covid19.vaccination(tgt = "global", data.fmt = "orig", disclaimer = TRUE)
vaccination <- covid19.vaccination(tgt = "global", data.fmt = "orig", disclaimer = TRUE)
vaccination <- read.csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv", header = T)
View(vaccination)
View(vaccination)
df <- coronavirus %>%
dplyr::filter(country == "France") %>%
dplyr::group_by(date, type) %>%
dplyr::summarise(total = sum(cases, na.rm = TRUE)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%
dplyr::arrange(date) %>%
dplyr::ungroup() %>%
dplyr::mutate(active = confirmed - death - recovered) %>%
dplyr::mutate(
confirmed_cum = cumsum(confirmed),
death_cum = cumsum(death),
recovered_cum = cumsum(recovered),
active_cum = cumsum(active)
)
View(df)
View(df)
df <- coronavirus %>%
dplyr::filter(country == "France") %>%
dplyr::group_by(date, type) %>%
dplyr::summarise(total = sum(cases, na.rm = TRUE)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%
dplyr::arrange(date) %>%
dplyr::ungroup() %>%
dplyr::mutate(active = confirmed - death - recovered) %>%
dplyr::mutate(
confirmed_cum = cumsum(confirmed),
death_cum = cumsum(death),
recovered_cum = cumsum(recovered),
active_cum = cumsum(active)
)
View(df)
SIR <- function(time, state, parameters) {
par <- as.list(c(state, parameters))
with(par, {
dS <- -beta * I * S / N
dI <- beta * I * S / N - gamma * I
dR <- gamma * I
list(c(dS, dI, dR))
})
}
RSS <- function(parameters) {
names(parameters) <- c("beta", "gamma")
out <- ode(y = init, times = xrang, func = SIR, parms = parameters)
fit <- out[, 3]
sum((Infected - fit)^2)
}
N <- 37846605
xrang <- 43:nrow(df)
Infected <- df$active_cum[xrang]
Recover <- df$recovered_cum[xrang]+df$death_cum[xrang]
Suspect <- N -Infected - Recover
init<-c(S = N-max(Infected[1], 1), I = max(Infected[1], 1), R = 0)
library(deSolve)
Opt <- optim(c(0.5, 0.5),
RSS,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, 1)
)
Opt$message
##############     SIR W FUNKCJI     ##################
library(deSolve)
Opt <- optim(c(0.5, 0.5),
RSS,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, 1)
)
SIRfunction <- function(N, I, R, S,D, Opt1, Opt2){
nt <- length(I)
grI <- I[2:nt]/I[1:nt-1]-1
epidemia <-which(!is.na(grI) && grI != Inf)
if(min(epidemia==1)){
epidemia <- setdiff(epidemia, Opt1)
}
I <- I[epidemia]
R <- R[epidemia]+D[epidemia]
S <- N - I - R
init<-c(S = N-max(Infected[1], 1), I = max(Infected[1], 1), R = 0)
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
beta <- Opt$par[[1]]
gamma <- Opt$par[[2]]
RS1 <- function(v,w,gamma, grJ) {
m1<-dlm(FF=gamma, V=v, GG=1, W=w, m0=0, C0=1)
wyn<-dlmFilter(grJ,m1)
sd(wyn$f-grJ)
}
grI1<-grI[epidemia]
zakres1<-c(min(epidemia)-1,epidemia)
Susp <- N-I-R-df$death_cum
Susp<-Susp[zakres1]
dat1<-df$dat[zakres1]
dan<-c(v=0,w=0,fw=Inf)
for (v in df$seq1) for (w in df$seq2) {
w1<-RS1(v,w,gamma,grI1)
if (w1<dan['fw'])
dan<-c(V=v,W=w,fw=w1)
}
model <- dlm(FF = gamma, V=v0, GG=1, W=w0, m0 = 4, C0=1e2) #petla dla roznych wartosci
wyn <- dlmSmooth(grI, model)
mse.list=dlmSvd2var(wyn$U.S, wyn$D.S)
se = 1.96*t(sapply(mse.list, FUN = function(x) sqrt(diag(x)))*sqrt(N/S))
wyn01 = data.frame(t=df$date[zakres1], R0=(wyn$s+1)*N/S, R0_UCL=(wyn$s+1)*N/S+se[1,],
R0_LCL = (wyn$s+1)*N/S-se[1,], grI=(c(0, grI)+1)*N/S)
}
library(reshape2)
ww<-SIRfunction(N, Infected, Recover, Suspect, df$death_cum, Opt_par[[1]], Opt_par[[2]])
ww$t = as.numeric(1:nrow(ww))
melted<- melt(ww[,c(1,2,5)], id.vars="t")
ggplot(melted, aes(x=t, y=value, color = variable)) + theme_bw() + geom_line()
library(ggplot2)
ww<-SIRfunction(N, Infected, Recover, Suspect, df$death_cum, Opt_par[[1]], Opt_par[[2]])
library(reshape2)
ww<-SIRfunction(N, Infected, Recover, Suspect, df$death_cum, Opt_par[[1]], Opt_par[[2]])
ww$t = as.numeric(1:nrow(ww))
melted<- melt(ww[,c(1,2,5)], id.vars="t")
ggplot(melted, aes(x=t, y=value, color = variable)) + theme_bw() + geom_line()
df <- coronavirus %>%
dplyr::filter(country == "Poland") %>%
dplyr::group_by(date, type) %>%
dplyr::summarise(total = sum(cases, na.rm = TRUE)) %>%
tidyr::pivot_wider(
names_from = type,
values_from = total
) %>%
dplyr::arrange(date) %>%
dplyr::ungroup() %>%
dplyr::mutate(active = confirmed - death - recovered) %>%
dplyr::mutate(
confirmed_cum = cumsum(confirmed),
death_cum = cumsum(death),
recovered_cum = cumsum(recovered),
active_cum = cumsum(active)
)
setwd("E:/studia/seminarium/R0")
saveRDS(df, file = "sirDF.tab")
df<-as.data.frame(readRDS("sirDF.tab"))
SIRfunction <- function(N, I, R, S,D, Opt1, Opt2){
nt <- length(I)
grI <- I[2:nt]/I[1:nt-1]-1
epidemia <-which(!is.na(grI) && grI != Inf)
if(min(epidemia==1)){
epidemia <- setdiff(epidemia, Opt1)
}
I <- I[epidemia]
R <- R[epidemia]+D[epidemia]
S <- N - I - R
init<-c(S = N-max(Infected[1], 1), I = max(Infected[1], 1), R = 0)
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
beta <- Opt$par[[1]]
gamma <- Opt$par[[2]]
RS1 <- function(v,w,gamma, grJ) {
m1<-dlm(FF=gamma, V=v, GG=1, W=w, m0=0, C0=1)
wyn<-dlmFilter(grJ,m1)
sd(wyn$f-grJ)
}
grI1<-grI[epidemia]
zakres1<-c(min(epidemia)-1,epidemia)
Susp <- N-I-R-df$death_cum
Susp<-Susp[zakres1]
dat1<-df$dat[zakres1]
dan<-c(v=0,w=0,fw=Inf)
for (v in df$seq1) for (w in df$seq2) {
w1<-RS1(v,w,gamma,grI1)
if (w1<dan['fw'])
dan<-c(V=v,W=w,fw=w1)
}
model <- dlm(FF = gamma, V=v0, GG=1, W=w0, m0 = 4, C0=1e2) #petla dla roznych wartosci
wyn <- dlmSmooth(grI, model)
mse.list=dlmSvd2var(wyn$U.S, wyn$D.S)
se = 1.96*t(sapply(mse.list, FUN = function(x) sqrt(diag(x)))*sqrt(N/S))
wyn01 = data.frame(t=df$date[zakres1], R0=(wyn$s+1)*N/S, R0_UCL=(wyn$s+1)*N/S+se[1,],
R0_LCL = (wyn$s+1)*N/S-se[1,], grI=(c(0, grI)+1)*N/S)
}
library(reshape2)
ww<-SIRfunction(N, Infected, Recover, Suspect, df$death_cum, Opt_par[[1]], Opt_par[[2]])
ww$t = as.numeric(1:nrow(ww))
melted<- melt(ww[,c(1,2,5)], id.vars="t")
ggplot(melted, aes(x=t, y=value, color = variable)) + theme_bw() + geom_line()
matplot(x=as.Date(ww$betadf$t), y=ww$betadf[,c(2,5)], type="l",xlab = "Daty", ylab = "Wsp. R0", main="Porownanie R0 wygladzonego i obliczonego bezposrednio")
legend("top", c("R0 wygladzony","R0 z danych"),col=seq_len(2),cex=0.8,fill=seq_len(2))
View(df)
View(df)
SIRfunction <- function(N, I, R, S,D, Opt1, Opt2){
nt <- length(I)
grI <- I[2:nt]/I[1:nt-1]-1
epidemia <-which(!is.na(grI) && grI != Inf)
if(min(epidemia==1)){
epidemia <- setdiff(epidemia, Opt1)
}
I <- I[epidemia]
R <- R[epidemia]+D[epidemia]
S <- N - I - R
init<-c(S = N-max(Infected[1], 1), I = max(Infected[1], 1), R = 0)
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
beta <- Opt$par[[1]]
gamma <- Opt$par[[2]]
RS1 <- function(v,w,gamma, grJ) {
m1<-dlm(FF=gamma, V=v, GG=1, W=w, m0=0, C0=1)
wyn<-dlmFilter(grJ,m1)
sd(wyn$f-grJ)
}
grI1<-grI[epidemia]
zakres1<-c(min(epidemia)-1,epidemia)
Susp <- N-I-R-df$death_cum
Susp<-Susp[zakres1]
dat1<-df$dat[zakres1]
dan<-c(v=0,w=0,fw=Inf)
for (v in df$seq1) for (w in df$seq2) {
w1<-RS1(v,w,gamma,grI1)
if (w1<dan['fw'])
dan<-c(V=v,W=w,fw=w1)
}
model <- dlm(FF = gamma, V=v0, GG=1, W=w0, m0 = 4, C0=1e2) #petla dla roznych wartosci
wyn <- dlmSmooth(grI, model)
mse.list=dlmSvd2var(wyn$U.S, wyn$D.S)
se = 1.96*t(sapply(mse.list, FUN = function(x) sqrt(diag(x)))*sqrt(N/S))
wyn01 = data.frame(t=df$date[zakres1], R0=(wyn$s+1)*N/S, R0_UCL=(wyn$s+1)*N/S+se[1,],
R0_LCL = (wyn$s+1)*N/S-se[1,], grI=(c(0, grI)+1)*N/S)
}
library(reshape2)
##############     SIR W FUNKCJI     ##################
library(deSolve)
Opt <- optim(c(0.5, 0.5),
RSS,
method = "L-BFGS-B",
lower = c(0, 0),
upper = c(1, 1)
)
N <- 37846605
xrang <- 43:nrow(df)
Infected <- df$active_cum[xrang]
Recover <- df$recovered_cum[xrang]+df$death_cum[xrang]
Suspect <- N -Infected - Recover
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
beta <- Opt$par[[1]]
gamma <- Opt$par[[2]]
SIRfunction <- function(N, I, R, S,D, Opt1, Opt2){
nt <- length(I)
grI <- I[2:nt]/I[1:nt-1]-1
epidemia <-which(!is.na(grI) && grI != Inf)
if(min(epidemia==1)){
epidemia <- setdiff(epidemia, Opt1)
}
I <- I[epidemia]
R <- R[epidemia]+D[epidemia]
S <- N - I - R
init<-c(S = N-max(Infected[1], 1), I = max(Infected[1], 1), R = 0)
Opt$message
Opt_par <- setNames(Opt$par, c("beta", "gamma"))
Opt_par
beta <- Opt$par[[1]]
gamma <- Opt$par[[2]]
RS1 <- function(v,w,gamma, grJ) {
m1<-dlm(FF=gamma, V=v, GG=1, W=w, m0=0, C0=1)
wyn<-dlmFilter(grJ,m1)
sd(wyn$f-grJ)
}
grI1<-grI[epidemia]
zakres1<-c(min(epidemia)-1,epidemia)
Susp <- N-I-R-df$death_cum
Susp<-Susp[zakres1]
dat1<-df$dat[zakres1]
dan<-c(v=0,w=0,fw=Inf)
for (v in df$seq1) for (w in df$seq2) {
w1<-RS1(v,w,gamma,grI1)
if (w1<dan['fw'])
dan<-c(V=v,W=w,fw=w1)
}
model <- dlm(FF = gamma, V=v0, GG=1, W=w0, m0 = 4, C0=1e2) #petla dla roznych wartosci
wyn <- dlmSmooth(grI, model)
mse.list=dlmSvd2var(wyn$U.S, wyn$D.S)
se = 1.96*t(sapply(mse.list, FUN = function(x) sqrt(diag(x)))*sqrt(N/S))
wyn01 = data.frame(t=df$date[zakres1], R0=(wyn$s+1)*N/S, R0_UCL=(wyn$s+1)*N/S+se[1,],
R0_LCL = (wyn$s+1)*N/S-se[1,], grI=(c(0, grI)+1)*N/S)
}
library(reshape2)
ww<-SIRfunction(N, Infected, Recover, Suspect, df$death_cum, Opt_par[[1]], Opt_par[[2]])
ww$t = as.numeric(1:nrow(ww))
melted<- melt(ww[,c(1,2,5)], id.vars="t")
ggplot(melted, aes(x=t, y=value, color = variable)) + theme_bw() + geom_line()
matplot(x=as.Date(ww$betadf$t), y=ww$betadf[,c(2,5)], type="l",xlab = "Daty", ylab = "Wsp. R0", main="Porownanie R0 wygladzonego i obliczonego bezposrednio")
legend("top", c("R0 wygladzony","R0 z danych"),col=seq_len(2),cex=0.8,fill=seq_len(2))
vaccination <- read.csv("https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/vaccinations/vaccinations.csv", header = T)
vaccinationDF <- vaccination %>% filter(location == "Poland")
View(vaccinationDF)
View(vaccinationDF)
vaccinationDF <- vaccination %>% filter(location == "Poland") %>%
group_by(date, )
View(coronavirus)
View(coronavirus)
View(vaccination)
